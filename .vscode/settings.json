{
  "workbench.colorTheme": "Default Dark Modern", // "Light"
  // -------------------
  // Basic Editor Rules:
  // -------------------
  "window.title": "${folderName}", // <--- "${dirty}${folderName}${separator}${activeFolderShort}\\${activeEditorShort}${separator}${activeEditorMedium}"
  "window.zoomLevel": 0,
  "window.zoomPerWindow": true, // <--- defaults to true. It used to be false before version 1.86.
  "workbench.tree.stickyScrollMaxItemCount": 7, // <--- defaults to 7. It used to be 1 before version 1.86.
  "workbench.activityBar.iconClickBehavior": "focus",
  "workbench.editor.editorActionsLocation": "default",
  // "workbench.list.horizontalScrolling": true,
  // "search.mode": "newEditor",
  "explorer.autoReveal": true,
  "explorer.autoRevealExclude": {
    "**/node_modules": false, // <--- Finally!!! I've been looking for this! opens/reveals files in node_modules in explorer tree view.
    "**/bower_components": false
  },
  "search.exclude": {
    // The default ones:
    "**/node_modules": true,
    "**/bower_components": true,
    "**/*.code-search": true
  },
  "files.associations": { "*.json": "jsonc", "*.svg": "html", "*.code-snippets": "jsonc" },
  "editor.colorDecorators": true, // <--- Controls whether the editor should render the inline color decorators and color picker.
  "editor.dragAndDrop": false, // <--- defaults to "true". Decides if drag and drop of code lines is allowed/possible. I always hated this feature.
  "editor.gotoLocation.multipleDefinitions": "goto", // <--- I FOUND IT!!!! No more peeking !!! default value was peek
  "editor.gotoLocation.multipleReferences": "peek", // <--- I FOUND IT!!!! When a reference was mis-spelled, it couldn't perform the goto operation, so it gets stuck in the same place.
  // "files.autoSave": "off", // Defaults to false. Possible options: off | onFocusChange | afterDelay | onWindowChange
  // "files.autoSaveDelay": 1000,
  // "files.refactoring.autoSave": true,
  // "editor.autoSurround": "languageDefined", // defaults to "languageDefined". Defines what to do when text is selected, and you hit ' or [.
  // "editor.minimap.enabled": true, // <--- defaults to "true". The 'minimap' is the mini-code on the right, which you can use to navigate a really long file.
  // "editor.mouseWheelZoom": false, // <--- default to "false".
  // "editor.multiCursorModifier": "alt", // <--- defaults to "alt".
  // "editor.showUnused": true, // <--- defaults to "true". true value marks unreachable code as faded out.
  // "editor.wordWrap": "off", // <--- defaults to "off".
  // "diffEditor.codeLens": false, // <--- defaults to "false"
  // "diffEditor.renderSideBySide": true, // <--- defaults to "true"
  // "editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToImplementation",
  // "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToImplementation",
  // "editor.gotoLocation.alternativeImplementationCommand": "editor.action.goToImplementation",
  // "editor.gotoLocation.alternativeReferenceCommand": "editor.action.goToImplementation",
  // "editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToImplementation",
  // "editor.gotoLocation.multipleDeclarations": "goto",
  // "editor.gotoLocation.multipleImplementations": "goto",
  // "editor.gotoLocation.multipleTypeDefinitions": ,

  // ---------------
  // Zen Mode Rules:
  // ---------------
  "zenMode.centerLayout": false,
  "zenMode.fullScreen": true,
  "zenMode.restore": true,
  "zenMode.showTabs": "none",
  "zenMode.hideStatusBar": true,
  "zenMode.hideActivityBar": true,
  "zenMode.hideLineNumbers": false,
  "zenMode.silentNotifications": true,
  // "editor.minimap.autohide": true,

  // ------------------------------
  // Javascript & Typescript Rules:
  // ------------------------------
  "javascript.preferences.importModuleSpecifier": "relative", // <--- defaults to "shortest"
  "javascript.preferences.importModuleSpecifierEnding": "auto", // <--- defaults to "auto"
  "javascript.updateImportsOnFileMove.enabled": "always", // <--- defaults to "prompt"
  "js/ts.implicitProjectConfig.checkJs": true, // <--- defaults to "false". Either this property, or `checkJs` property within your jsconfig must be set to true for type-checkingto work inside js files.

  "typescript.preferences.importModuleSpecifier": "relative", // <--- defaults to "shortest"
  "typescript.preferences.importModuleSpecifierEnding": "auto", // <--- defaults to "auto"
  "typescript.updateImportsOnFileMove.enabled": "always", // <--- defaults to "prompt"

  // "typescript.validate.enable": true,
  // "typescript.tsserver.experimental.enableProjectDiagnostics": true,

  // ----------------
  // Work Tree Rules:
  // ----------------
  "workbench.tree.indent": 14,
  "workbench.tree.renderIndentGuides": "always",

  // ------------------------------
  // IDE Color Customization Rules:
  // ------------------------------
  "workbench.colorCustomizations": {
    "[Default Dark Modern]": {
      "activityBar.foreground": "#99ff99",
      "activityBar.inactiveForeground": "#444",
      "activityBar.dropBorder": "#00ff00",
      "activityBar.border": "#666",
      "activityBar.activeBorder": "#00000000",
      "activityBar.activeBackground": "#ffffff33",
      // "activityBar.background": "#000",
      // "activityBarBadge.background": "#000",
      // "activityBarBadge.foreground": "#fff",

      "sideBar.border": "#535353",
      // "sideBarTitle.background": "#0d2d78",
      // "sideBar.background": "#000",
      // "sideBar.foreground": "#fff",
      // "sideBarTitle.foreground": "#ff0000",

      // "tab.activeBackground": "default",
      "tab.inactiveBackground": "#00000000",
      "tab.inactiveForeground": "#666",
      // "tab.hoverBackground": "#ff0000",

      "dropdown.border": "#bbb",
      "dropdown.foreground": "#ffffff",
      // "dropdown.background": "default", // <--- #393939c7

      "editor.background": "#1c1c1c",
      "editor.foreground": "#ddd",
      "editorLineNumber.activeForeground": "#00ff00",
      "editorMultiCursor.primary.foreground": "#fff",
      "editorMultiCursor.secondary.foreground": "#888",
      // "editorLineNumber.foreground": "default",
      // "editorCursor.foreground": "#00ff00",
      // "editor.selectionBackground": "#008800",

      "editorUnnecessaryCode.opacity": "#ffffff88",
      // "editorUnnecessaryCode.border": "#fff",

      // "diffEditor.insertedTextBackground": "#3E8C43fe", // <--- Inserted Text (Greenish by default)
      "diffEditor.insertedTextBackground": "#00ff0030", // <--- Inserted Text (Greenish by default)
      "diffEditor.removedTextBackground": "#9E4247fe", // <--- Removed Text (Reddish by default)
      "diffEditor.insertedLineBackground": "#3E8C4330",
      "diffEditor.removedLineBackground": "#633E3Dfe",
      // "diffEditor.insertedTextBorder": "#008000",
      // "diffEditor.removedTextBorder": "#FF0000fe",
      // "diffEditorGutter.insertedLineBackground": "#0000ff"
      // "diffEditorGutter.removedLineBackground": "#0000ff"

      "inputOption.activeBackground": "#007ACC", // #2A5072 or #007ACC
      "inputOption.activeBorder": "#007ACC",

      "list.focusHighlightForeground": "#2784ff",
      "list.highlightForeground": "#a3cbff",
      // "list.hoverBackground": "default",
      // "list.activeSelectionBackground": "default",
      // "list.activeSelectionForeground": "default",
      // "list.activeSelectionIconForeground": "default",

      "search.resultsInfoForeground": "#00a2ff",

      "toolbar.activeBackground": "#484848",
      "toolbar.hoverBackground": "#eeeeee33",
      // "toolbar.hoverOutline": "default",

      "tree.indentGuidesStroke": "#c8c8c8", // <--- defaults to #585858
      // "tree.inactiveIndentGuidesStroke": "#ff0000",

      "widget.shadow": "#00ff00cc" // <--- or "#ff00cc". Color of find & replace tool, or the command palette.
      // "widget.border": "default", // <--- of find & replace tool, or the command palette.

      // "icon.foreground": "#9dc4ff",
      // "foreground": "default",
      // "disabledForeground": "default",
      // "selection.background": "default",
      // "textLink.foreground": "default"
    },
    // "focusBorder": "#00000000", // <--- don't make this transparent! It will make items in tree-view invisible upon traversing with the arrows.
    "editorGutter.modifiedBackground": "#00000000",
    "editorGutter.addedBackground": "#00000000",
    "editorGutter.deletedBackground": "#00000000",
    "editorGutter.foldingControlForeground": "#6c6cff",
    "editorGutter.itemGlyphForeground": "#fff",
    "editorGutter.itemBackground": "#586bffdb"
  },

  // --------------------------
  // Code actions onSave Rules:
  // --------------------------
  // - Mostly for formatting using a formatter (eslint & prettier)
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "always",
    "quickfix.biome": "always",
    "source.addMissingImports": "never"
    // "source.fixAll": true, // <--- This is stronger than source.fixAll.eslint! because it also aggresively removes unreachable code!
    // "source.organizeImports": true, // <--- This also removes unused imports. I disabled it, since I'm already using eslint for that.
    // "source.organizeImports.biome": "always",
  },

  // ----------
  // Git Rules:
  // ----------
  "git.closeDiffOnOperation": false, // <--- defaults to "true". Basically? This is relevant for when you hit the plus sign to stage changes. Do you want VsCode to close the DiffEditor afterwards? or not? I do not.
  "git.showCommitInput": false, // <--- defaults to "true". I'm not using it to commit, so I hide it.
  "git.showActionButton": { "commit": false, "publish": true, "sync": false },
  "git.alwaysShowStagedChangesResourceGroup": true, // <--- defaults to "false". Always show the "Staged Changes" tab, even if there are 0 changes staged.
  // "git.showInlineOpenFileAction": false, // <--- defaults to "true". When examining changes, there's an "open file" icon near the revert changes icon. I use it, so I keep it visible.
  // "git.untrackedChanges": "separate", // <--- defaults to "mixed".
  // "git.openDiffOnClick": false, // <--- defaults to "true".
  "files.exclude": { "**/.git": false },

  // --------------
  // GitLens Rules:
  // --------------
  "gitlens.codeLens.enabled": false, // <--- finallyyy!!! I wanted to disable this for soooo longggg!
  "gitlens.views.scm.grouped.views": {
    // All of these will appear:
    "branches": false,
    "stashes": false,
    // All of these will NOT appear:
    "commits": true,
    "remotes": true,
    "repositories": true
  },
  // "gitlens.advanced.blame.delayAfterEdit": 5000,
  // "gitlens.outputLevel": "warn",
  // "gitlens.currentLine.enabled": false,
  // "gitlens.currentLine.format": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",

  // ---------------
  // Terminal Rules:
  // ---------------
  "terminal.integrated.smoothScrolling": true, // <--- defaults to "false".
  "terminal.integrated.copyOnSelection": true, // <--- defaults to "false".
  "terminal.integrated.rightClickBehavior": "copyPaste", // <--- defaults to "selectWord".
  "terminal.integrated.cursorStyle": "line", // <--- defaults to "block".
  "terminal.integrated.cursorWidth": 2, // <--- defaults to "1".
  "terminal.integrated.enablePersistentSessions": false, // defaults to "true".
  "terminal.integrated.persistentSessionReviveProcess": "never", // defaults to "onExit".
  "terminal.integrated.mouseWheelZoom": false, // <--- default to false.
  "terminal.integrated.fontSize": 18, // <--- defaults to 12.
  // "terminal.integrated.cursorBlinking": false, // <--- defaults to "false".
  // "terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’|", // defaults to  ()[]{}',\"`─‘’|
  // "terminal.integrated.scrollback": 1000, // <--- defaults to 1000 lines backwards
  // "terminal.integrated.defaultLocation": "view", // <--- defaults to "view".
  // "terminal.integrated.altClickMovesCursor": true, // <--- defaults to "true". Write a long word (i.e. multiCursorModifiermultiCursorModifier), and now alt+click a position within that word. watch what happens to the cursor.

  // ------------
  // Debug Rules:
  // ------------
  "debug.console.acceptSuggestionOnEnter": "on", // finally!!! This drove me mad!!! defaults to off.
  "debug.closeReadonlyTabsOnEnd": true, // <--- defaults to false. When attached to a debugger, there can be internal or virtual source files that don't exist on-disk, which are opened as readonly. This new setting causes VS Code to automatically close any opened readonly files from the debug session when the session ends.

  // -----------
  // JSON Rules:
  // -----------
  "[jsonc]": {
    "editor.quickSuggestions": { "strings": "on" },
    "editor.suggest.insertMode": "replace", // defaults to insert
    "editor.defaultFormatter": "esbenp.prettier-vscode" // biomejs.biome or esbenp.prettier-vscode
  },

  // ---------------
  // Markdown Rules:
  // ---------------
  "[markdown]": {
    "editor.wordWrap": "on",
    "editor.renderWhitespace": "all",
    "editor.acceptSuggestionOnEnter": "off",
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  // -----------
  // HTML Rules:
  // -----------
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  // -------------
  // Eslint Rules:
  // -------------
  // "prettier.configPath": ".prettierrc.js",
  // Enable eslint for all supported languages
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "vue",
    "json"
    // "html", // <--- commented out because svg files are treated as html and eslint can't handle that.
    // "jsonc" // <--- commented out because it errored the eslintrc config file
    // "yaml" // <--- works badly on yamls
    // "markdown" // <--- works badly on markdowns
  ],

  // ----------
  // CSS Rules:
  // ----------
  "css.lint.unknownProperties": "ignore",
  "css.lint.unknownAtRules": "ignore"
  // "[css]": {
  //   "editor.defaultFormatter": "aeschli.vscode-css-formatter" // <--- i'm using prettier formatter instead of this, but also does an ok job.
  // },
}
